
name: Build

on:
  push:
    branches: [main]
  schedule:
    # every day
    - cron: '0 1 * * *'
  workflow_dispatch: 

jobs:
  build_ostree_ext_cli:
    runs-on: ubuntu-latest
    # needs to run in the most recent version of Ubuntu to ensure that the ostree version is new enough
    container: ubuntu:rolling

    steps:

    - run: apt-get update && apt-get install -y libssl-dev ostree libostree-1-1 libostree-dev git curl build-essential
    - run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

    - uses: actions/checkout@v2
      with:
        repository: 'ostreedev/ostree-rs-ext'
        path: 'ostree-rs-ext'
      
    - name: Cache
      id: cache-ostree-rs-ext-target
      uses: actions/cache@v3
      with:
        path: ostree-rs-ext/target/
        key: ${{ runner.os }}-ostree-rs-ext-target

    - run: $HOME/.cargo/bin/cargo build --release
      working-directory: ostree-rs-ext
    - run: ls ostree-rs-ext/target/release
    # upload the binary as an artifact
    - uses: actions/upload-artifact@v2
      with:
        name: ostree-ext-cli
        path: ostree-rs-ext/target/release/ostree-ext-cli

  build:
    runs-on: ubuntu-latest
    needs: build_ostree_ext_cli
    permissions:
      packages: write
      contents: read
    env:
      TMPROOT: /mnt/tmproot

    strategy:
      matrix:
        edition:
          - buildkit
          - build
          - bootable

    steps:
        # - name: Maximize build space
        #   uses: easimon/maximize-build-space@master
        #   with:
        #     root-reserve-mb: 512
        #     swap-size-mb: 1024
        #     remove-dotnet: 'true'
        #     remove-codeql: 'true'
        #     remove-android: 'true'
        #     remove-haskell: 'true'
        #     remove-docker-images: 'true'
          
        - name: Checkout code
          uses: actions/checkout@v2

        - uses: actions/download-artifact@v2
          with:
            name: ostree-ext-cli
            path: ostree-ext-cli

        - name: Login to GitHub Container Registry
          uses: docker/login-action@v1
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - uses: actions/setup-go@v4
          with:
            go-version: '>=1.19.0'

        - name: Set script permissions
          run: chmod +x ./scripts/*.sh

        - name: Set script permissions
          run: chmod +x ./scripts/*.sh

        - name: Install dependencies
          run: ./scripts/install_dependencies.sh

        - name: Prepare OSTree
          run: ./scripts/prepare_ostree.sh

        - name: Install packages to build repo
          run: ./scripts/install_packages.sh
          env:
            EDITION: ${{ matrix.edition }}

        - name: Turn OSTree commit into OCI image
          run: ./ostree-ext-cli/ostree-ext-cli container encapsulate --repo=$TMPROOT/build-repo stable-os/$(uname -m)/standard docker://ghcr.io/${{ github.repository_owner }}/stable-os-${{ matrix.edition }}:latest

        # this is bugged and creates a massive (2GB) tarball, the OCI image is only 600MB
        # - name: Upload filesystem image
        #   uses: actions/upload-artifact@v2
        #   with:
        #     name: filesystem
        #     path: stable-os-build.tar.gz

  build_iso:
    runs-on: ubuntu-latest
    # needs: [build]
    container: ghcr.io/stable-os/stable-os-build:latest

    permissions:
      packages: read
      contents: read
    
    steps:
      # - name: Prepare OSTree repository
      #   run: mkdir /tmp/build-repo && ostree --repo=/tmp/build-repo init --mode=bare-user

      # - name: Download filesystem image
      #   run: ostree-ext-cli container unencapsulate --repo=/tmp/build-repo ostree-unverified-registry:ghcr.io/stable-os/stable-os-build:latest

      - name: Create sudo stub for maximum build space
        run: echo "#!/bin/bash" > /usr/bin/sudo

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4112
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          build-mount-path: '/containertmpdir'

      - name: Get CA certificates
        run: make-ca -g

      - name: Download filesystem image
        run: skopeo copy docker://ghcr.io/stable-os/stable-os-bootable:latest dir:/tmp/filesystemimage --dest-decompress
      
      - name: Extract filesystem image
        # find the first tar archive in the folder, it has no file extension so it has to use `file` to figure out what it is
        run: "mkdir /tmp/filesystemimage_decompressed && tar -xf $(file --mime-type /tmp/filesystemimage/* | awk -F': ' '$2==\"application/x-tar\"{print $1}' | head -n 1) -C /tmp/filesystemimage_decompressed"

      - name: Delete sysroot folder from filesystem image
        run: rm -rf /tmp/filesystemimage_decompressed/sysroot
      
      - name: Crease grub rescue image
        run: grub-mkrescue -o /tmp/grub-rescue.iso /tmp/filesystemimage_decompressed