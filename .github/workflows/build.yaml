
name: Build

on:
  push:
    branches: [main]
  schedule:
    # every day
    - cron: '0 1 * * *'
  workflow_dispatch: 

jobs:
  build_ostree_ext_cli:
    runs-on: ubuntu-latest
    # needs to run in the most recent version of Ubuntu to ensure that the ostree version is new enough
    container: ubuntu:rolling

    steps:

    - run: apt-get update && apt-get install -y libssl-dev ostree libostree-1-1 libostree-dev git curl build-essential
    - run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

    - uses: actions/checkout@v2
      with:
        repository: 'ostreedev/ostree-rs-ext'
        path: 'ostree-rs-ext'
      
    - name: Cache
      id: cache-ostree-rs-ext-target
      uses: actions/cache@v3
      with:
        path: ostree-rs-ext/target/
        key: ${{ runner.os }}-ostree-rs-ext-target

    - run: $HOME/.cargo/bin/cargo build --release
      working-directory: ostree-rs-ext
    - run: ls ostree-rs-ext/target/release
    # upload the binary as an artifact
    - uses: actions/upload-artifact@v2
      with:
        name: ostree-ext-cli
        path: ostree-rs-ext/target/release/ostree-ext-cli

  build:
    runs-on: ubuntu-latest
    needs: build_ostree_ext_cli
    permissions:
      packages: write
      contents: read
    env:
      TMPROOT: /mnt/tmproot

    strategy:
      matrix:
        edition:
          - buildkit
          - build
          - bootable

    steps:
        # - name: Maximize build space
        #   uses: easimon/maximize-build-space@master
        #   with:
        #     root-reserve-mb: 512
        #     swap-size-mb: 1024
        #     remove-dotnet: 'true'
        #     remove-codeql: 'true'
        #     remove-android: 'true'
        #     remove-haskell: 'true'
        #     remove-docker-images: 'true'
          
        - name: Checkout code
          uses: actions/checkout@v2

        - uses: actions/download-artifact@v2
          with:
            name: ostree-ext-cli
            path: ostree-ext-cli

        - name: Login to GitHub Container Registry
          uses: docker/login-action@v1
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - uses: actions/setup-go@v4
          with:
            go-version: '>=1.19.0'

        - name: Set script permissions
          run: chmod +x ./scripts/*.sh

        - name: Set script permissions
          run: chmod +x ./scripts/*.sh

        - name: Install dependencies
          run: ./scripts/install_dependencies.sh

        - name: Prepare OSTree
          run: ./scripts/prepare_ostree.sh

        - name: Install packages to build repo
          run: ./scripts/install_packages.sh
          env:
            EDITION: ${{ matrix.edition }}

        - name: Create OCI image
          run: docker build -t ghcr.io/${{ github.repository_owner }}/stable-os-${{ matrix.edition }}:latest -f ./Containerfile .

        - name: Push OCI image
          run: docker push ghcr.io/${{ github.repository_owner }}/stable-os-${{ matrix.edition }}:latest

        #- name: Turn OSTree commit into OCI image
        #  run: ./ostree-ext-cli/ostree-ext-cli container encapsulate --repo=$TMPROOT/build-repo stable-os/$(uname -m)/standard docker://ghcr.io/${{ github.repository_owner }}/stable-os-${{ matrix.edition }}:latest

        # this is bugged and creates a massive (2GB) tarball, the OCI image is only 600MB
        # - name: Upload filesystem image
        #   uses: actions/upload-artifact@v2
        #   with:
        #     name: filesystem
        #     path: stable-os-build.tar.gz

  build_iso:
    runs-on: ubuntu-latest
    needs: [build]
    # container: ghcr.io/stable-os/stable-os-build:latest

    permissions:
      packages: read
      contents: read
    
    steps:
      # - name: Prepare OSTree repository
      #   run: mkdir /tmp/build-repo && ostree --repo=/tmp/build-repo init --mode=bare-user

      # - name: Download filesystem image
      #   run: ostree-ext-cli container unencapsulate --repo=/tmp/build-repo ostree-unverified-registry:ghcr.io/stable-os/stable-os-build:latest

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 12288
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          build-mount-path: '/containertmpdir'

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Tell Docker to use the container directory
        run: "echo \"{ \\\"data-root\\\": \\\"/containertmpdir\\\" }\" | sudo tee /etc/docker/daemon.json"
        
      - run: cat /etc/docker/daemon.json
        
      - name: Restart Docker
        run: sudo systemctl restart docker 

      - run: journalctl -xeu docker.service

      - name: Run build container
        run: sudo docker run --privileged --rm -e GHCRTOKEN=${{ secrets.GITHUB_TOKEN }} -e ACTOR=${{ github.actor }} -v ./scripts/build_iso.sh:/build_iso.sh -v /containertmpdir:/shareddir ghcr.io/stable-os/stable-os-bootable:latest bash -c "chmod +x /build_iso.sh && /build_iso.sh"

      - name: Copy grub-rescue.iso
        run: sudo cp /containertmpdir/grub-rescue.iso /grub-rescue.iso

      - name: Take ownership of grub-rescue.iso
        run: sudo chown root:root /grub-rescue.iso
      
      - name: Give everyone read access to grub-rescue.iso
        run: sudo chmod a+r /grub-rescue.iso

      - name: Upload ISO
        uses: actions/upload-artifact@v2
        with:
          name: iso
          path: /grub-rescue.iso